"https://github.com/spf13/spf13-vim/issues/819#issuecomment-145378767
inoremap <expr><CR> neosnippet#expandable() ? neosnippet#mappings#expand_or_jump_impl() : pumvisible() ? neocomplete#close_popup() : "\<CR>"

" Do not maximize panes when switched to
" If you want that feature, either remove the next two line
" or append  '_' to both lines
map <C-J> <C-W>j<C-W>
map <C-K> <C-W>k<C-W>


" Indent entire file
map <C-f> gg=G

set relativenumber

" Poweline
let g:airline_powerline_fonts=1


"Dash.vim key bindings
"Searches for the word under the cursor, considering the current keyword setup for docset lookup.
:nmap <silent> <leader>d <Plug>DashSearch

"Code folding based on syntax
set foldmethod=manual
"set foldlevelstart=1

"let javaScript_fold=1         " JavaScript
"let perl_fold=1               " Perl
"let php_folding=1             " PHP
"let r_syntax_folding=1        " R
"let ruby_fold=1               " Ruby
"let sh_fold_enabled=1         " sh
"let vimsyn_folding='af'       " Vim script
"let xml_syntax_folding=1      " XML


let g:AutoPairsMultilineClose = 0
let g:AutoPairsFlyMode = 0


" Status Line
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"Syntastic Recommended settings!"
map <Leader>s :SyntasticToggleMode<CR>

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" ghc-mod mappings
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s %s"

map <silent>tw :GhcModTypeInsert<CR>
map <silent>ts :GhcModSplitFunCase<CR>
map <silent>tq :GhcModType<CR>
map <silent>te :GhcModTypeClear<CR>


"---- Disable conceal for your haskell files
let g:no_haskell_conceal = 1

"---- Tabularize based on ::
nmap <Leader>a:: :Tabularize /::<CR>

"---- For necoghc
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
let g:ycm_semantic_triggers = {'haskell' : ['.']}

"----- For vim-syntax-shakespeare
autocmd BufNewFile,BufRead *.hamlet set filetype=hamlet
autocmd BufNewFile,BufRead *.julius set filetype=julius
autocmd BufNewFile,BufRead *.lucius set filetype=lucius
"Allow one-liner QQs even if they have invalid nesting:
let g:hamlet_prevent_invalid_nesting = 0
"Don't highlight empty space at the end of lines:
let g:hamlet_highlight_trailing_space = 0



"For HaskTags
let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }
